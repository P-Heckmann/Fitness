
## Time in Zones - time and percentage shown

# Zone 5   > 169 bpm • Maximum
# Zone 4   150 - 168 bpm • Threshold
# Zone 3   132 - 149 bpm • Aerobic
# Zone 2   113 - 131 bpm • Easy
# Zone 1   94 - 112 bpm • Warm Up

df_tcx["Heart rate"]

ranges = {
    "Range 1": (0, 112),
    "Range 2": (113, 131),
    "Range 3": (132, 149),
    "Range 4": (150, 168),
    "Range 5": (169, 300),
}

total_values = len(df_tcx)
percentages = {}

for range_name, (start, end) in ranges.items():
    count = ((df_tcx["Heart rate"] >= start) & (df_tcx["Heart rate"] <= end)).sum()
    percentage = (count / total_values) * 100
    percentages[range_name] = percentage

# Print the percentages
for range_name, percentage in percentages.items():
    print(f"{range_name}: {percentage}%")


# Create a new DataFrame with percentages
percentages_df = pd.DataFrame(percentages, index=["Percentage"])

chart = (
    alt.Chart(df_tcx)
    .mark_bar()
    .encode(alt.X("Heart rate:Q"), alt.Y("count()"))
    .properties(width=700, height=200)
    .interactive()
)
chart













st.markdown("""---""")

st.write(f"#### Pace")


selected_variable = st.selectbox(
    "Select a variable to plot", variable_names, index=0, key="2"
)

chart = (
    alt.Chart(df_tcx)
    .mark_area()
    .encode(
        x=alt.X(selected_variable),
        y=alt.Y("speed", scale=alt.Scale(domain=[0, 10]), title="minutes per km"),
    )
    .properties(width=700, height=200)
    .interactive()
)

chart

st.markdown("""---""")

st.write(f"#### Heart rate")


selected_variable = st.selectbox(
    "Select a variable to plot", variable_names, index=0, key="3"
)

chart = (
    alt.Chart(df_tcx)
    .mark_area()
    .encode(
        x=alt.X(selected_variable),
        y=alt.Y("Heart rate", scale=alt.Scale(domain=[120, 180]), title="bpm"),
    )
    .properties(width=700, height=200)
    .interactive()
)

chart

st.markdown("""---""")

st.write(f"#### Cadence")


selected_variable = st.selectbox(
    "Select a variable to plot", variable_names, index=0, key="4"
)

chart = (
    alt.Chart(df_tcx)
    .mark_area()
    .encode(
        x=alt.X(selected_variable),
        y=alt.Y("Cadence", scale=alt.Scale(domain=[50, 100]), title="spm"),
    )
    .properties(width=700, height=200)
    .interactive()
)

chart


st.markdown("""---""")

st.write(f"#### Laps")


df_general_tcx["Lap"] = list(range(1, len(df_general_tcx) + 1))

column_mapping = {
    "TotalTimeSeconds": "Time",
    "DistanceMeters": "Distance",
    "AverageHeartRateBpm.Value": "Avg HR",
    "MaximumHeartRateBpm.Value": "Max HR",
    "MaximumSpeed": "Max Pace",
    "Extensions.ns3:LX.ns3:AvgSpeed": "Avg Pace",
    "Extensions.ns3:LX.ns3:AvgRunCadence": "Avg Cadence",
    "Extensions.ns3:LX.ns3:MaxRunCadence": "Max Cadence",
}
# Rename the columns using the mapping
df_general_tcx = df_general_tcx.rename(columns=column_mapping)


df_general_tcx["Time"] = df_general_tcx["Time"].astype(int)

df_general_tcx["Distance"] = df_general_tcx["Distance"].astype(int)

# df_general_tcx["Time"] = str(datetime.timedelta(seconds=df_general_tcx["Time"]))

df_general_tcx["Cumulative time"] = df_general_tcx["Time"]

# total ascent
# total descent

# summary

df_laps = df_general_tcx[
    [
        "Lap",
        "Time",
        "Cumulative time",
        "Distance",
        "Avg Pace",
        #        "Max Pace",
        "Avg HR",
        #        "Max HR",
        "Avg Cadence",
        #        "Max Cadence",
        "Calories",
    ]
]

df_laps.loc["Summary"] = df_laps.agg(
    {
        "Time": "sum",
        "Cumulative time": "sum",
        "Distance": "sum",
        "Avg Pace": "mean",
        #        "Max Pace": "mean",
        "Avg HR": "mean",
        #        "Max HR": "mean",
        "Avg Cadence": "mean",
        #        "Max Cadence": "mean",
        "Calories": "mean",
    }
)

st.dataframe(df_laps)


st.markdown("""---""")

st.write(f"#### Heart Rate Zones")

# Create the Altair histogram