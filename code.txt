
## Time in Zones - time and percentage shown

# Zone 5   > 169 bpm • Maximum
# Zone 4   150 - 168 bpm • Threshold
# Zone 3   132 - 149 bpm • Aerobic
# Zone 2   113 - 131 bpm • Easy
# Zone 1   94 - 112 bpm • Warm Up

df_tcx["Heart rate"]

ranges = {
    "Range 1": (0, 112),
    "Range 2": (113, 131),
    "Range 3": (132, 149),
    "Range 4": (150, 168),
    "Range 5": (169, 300),
}

total_values = len(df_tcx)
percentages = {}

for range_name, (start, end) in ranges.items():
    count = ((df_tcx["Heart rate"] >= start) & (df_tcx["Heart rate"] <= end)).sum()
    percentage = (count / total_values) * 100
    percentages[range_name] = percentage

# Print the percentages
for range_name, percentage in percentages.items():
    print(f"{range_name}: {percentage}%")


# Create a new DataFrame with percentages
percentages_df = pd.DataFrame(percentages, index=["Percentage"])


























def extract_tcx_data(file_path):
    # Load the TCX file into a Python dictionary
    with open(file_path, "r") as f:
        data = xmltodict.parse(f.read())

    # Extract the activity data from the dictionary
    activity = data["TrainingCenterDatabase"]["Activities"]["Activity"]

    # Conversion to DataFrame
    df = pd.json_normalize(activity, record_path=["Lap", "Track", "Trackpoint"])

    cols_to_convert = [
        "AltitudeMeters",
        "DistanceMeters",
        "Position.LatitudeDegrees",
        "Position.LongitudeDegrees",
        "HeartRateBpm.Value",
        "Extensions.ns3:TPX.ns3:Speed",
        "Extensions.ns3:TPX.ns3:RunCadence",
    ]

    # Convert to float
    df[cols_to_convert] = df[cols_to_convert].astype(float)

    # Convert to datetime
    df["Time"] = pd.to_datetime(df["Time"])

    # df = df.dropna()

    return df